package com.sam.accounting.service;
/**
 * revenue
 * cogs
 * operation
 * depreciation
 * otherExpenses
 * otherRevenue
 */
public class FinantialStatement {
	Double revenue;
	Double cogs;

	/**
	 * Definition: 
	 * These are expenses a business incurs through its normal business operations. 
	 * Often abbreviated as OPEX, operating expenses include 
	 * rent, equipment, inventory costs, marketing, payroll, insurance, and funds 
	 * allocated for research and development.
       Formula: 
       There's no specific formula to calculate 
       Operating Expenses as they are the total of all the costs 
       that a company incurs from its normal business operations. 
       However, from the accounting perspective, 
       you sum up all the expenses related to your core business operations.
	 */
	Double operatingExpenses;
	/**
	 * Definition: Operating income is a measure of the profit a company generates from its 
	 * core business operations, before taxes and interest are calculated. This value does not include any profit earned from the firm's investments, such as earnings from firms in which the company has partial interest.
       Formula: The formula for Operating Income is:
       Operating Income = Gross Income - Operating Expenses - Depreciation - Amortization
       In the context of your code, if Gross Income is represented by the method getGrossProfit(), and Operating Expenses is a field, then the method for Operating Income would be:
	 */
	Double getOperatingIncome() 
	{
		if (operatingExpenses == null || getGrossProfit() == null)
			return null;
		
		 return getGrossProfit() - operatingExpenses - depreciation - amortization;
	}
	
	
	Double depreciation=0.0;
	Double amortization=0.0;
	Double otherExpenses;
	Double otherRevenue;
	Double pretaxIncome;
	Double incomeTax;
	private double quebecTax;
	private double federalTax;

	/**
	 * Net income, also known as net profit or net earnings, is a financial measure
	 * that represents the total profit or earnings generated by a business after
	 * subtracting all expenses, taxes, and other deductions. It is an important
	 * indicator of a company's profitability.
	 * 
	 * Net Income = Total Revenue - Total Expenses
	 */
	Double getNetIncome() {

		Double totalExpenses = getTotalExpenses();
		Double totalRevenue = getTotalRevenue();
		double netIncome = totalRevenue - totalExpenses - getIncomeTax();
		return netIncome;
	}

	/**
	 * Gross Income = Total Revenue - Cost of Goods Sold (COGS) Gross Profit: This
	 * is calculated by subtracting COGS from Revenue. It shows how well a company
	 * generates revenue from direct costs like direct labor and direct materials
	 * costs.
	 */
	public Double getGrossProfit() {
		if (revenue == null || cogs == null)
			return null;
		return revenue - cogs;
	}



	/**
	 * Pretax Income: This is calculated by subtracting other expenses and adding
	 * other income to the operating income.
	 */
	public Double getPretaxIncome() {
		if (getOperatingIncome() == null || otherExpenses == null || otherRevenue == null)
			return null;
		return getOperatingIncome() - otherExpenses + otherRevenue;
	}

	public Double calculateIncomeTax(double rate) {
		return calculateIncomeTax(getGrossProfit(), getTotalExpenses(), rate);
	}

	/**
	 * Total Expenses = COGS + Operating Expenses + Other Expenses
	 * 
	 * @return
	 */
	private Double getTotalExpenses() {
		
		return Math.abs(cogs + getOperatingExpenses() + getOtherExpenses());
	}

	/**
	 * 
	 * @return
	 */
	private Double getTotalRevenue() {
		return getOtherRevenue()+getRevenue();
	}

	public Double calculateIncomeTax(Double grossIncome, double totalExpenses, double taxRate) {
		if (null == grossIncome)
			return null;
		Double taxableIncome = grossIncome - totalExpenses;
		Double incomeTax = taxableIncome * taxRate;
		return incomeTax;
	}

	public Double getRevenue() {
		if(null == revenue)
			return 0.0;
		return revenue;
	}

	public void setRevenue(Double revenue) {
		this.revenue = revenue;
	}

	public Double getCogs() {
		return cogs;
	}

	public void setCogs(Double cogs) {
		if(null == cogs)
			this.cogs = 0.0;
		else
			this.cogs = Math.abs(cogs);
	}

	public Double getOperatingExpenses() {
		if(null == operatingExpenses)
			return 0.0;
		return operatingExpenses;
	}

	public void setOperatingExpenses(Double operatingExpenses) {
		if(null == operatingExpenses)
			operatingExpenses=0.0;
		else
			this.operatingExpenses = Math.abs(operatingExpenses);
	}

	public Double getOtherExpenses() {
		if(null == otherExpenses)
			return 0.0;
		return otherExpenses;
	}

	public void setOtherExpenses(Double otherExpenses) {
		this.otherExpenses = null == otherExpenses ? 0.0 : Math.abs(otherExpenses);
	}

	public Double getOtherRevenue() {
		if(null == otherRevenue)
			return 0.0;
		return otherRevenue;
	}

	public void setOtherRevenue(Double otherRevenue) {
		this.otherRevenue = otherRevenue;
	}

	public Double getIncomeTax() {
		return incomeTax;
	}

	public void setIncomeTax(Double incomeTax) {
		this.incomeTax = incomeTax;
	}

	public void setPretaxIncome(Double pretaxIncome) {
		this.pretaxIncome = pretaxIncome;
	}

	public void setQuebecTax(double d) {
		this.quebecTax=d;
		
	}

	public void setFederalTax(double d) {
		this.federalTax=d;
		
	}

	public Double getDepreciation() {
		return depreciation;
	}

	public void setDepreciation(Double depreciation) {
		this.depreciation = depreciation;
	}

	public Double getAmortization() {
		return amortization;
	}

	public void setAmortization(Double amortization) {
		this.amortization = amortization;
	}

	public double getQuebecTax() {
		return quebecTax;
	}

	public double getFederalTax() {
		return federalTax;
	}
	
	
}
